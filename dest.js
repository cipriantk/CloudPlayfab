
handlers.helloWorld = function (args, context) {
    

    var message = "Hello " + currentPlayerId + "!";


    log.info(message);
    var inputValue = null;
    if (args && args.inputValue)
        inputValue = args.inputValue;
    log.debug("helloWorld:", { input: args.inputValue });


    return { messageValue: message };
};



handlers.SetStartInventory = function (args, context) {
    
 
	
	 server.UpdateUserInternalData({
        PlayFabId: currentPlayerId,
        Data: {
            Inventory: "EG:15-EV:0-ET:0-EA:0-EM:0-ER:0-P:0-ERoz:0-I:0-ID:0-M:0-T:0",
           
        }
    });
	
	

 
    return { messageValue: "nimic" };
};




handlers.HostTrade = function (args, context) {

	 server.UpdateUserData({
        PlayFabId: currentPlayerId,
        Data: {
            Trade: args.detalii,
           
        }
    });
	
	
    return { messageValue: args.detalii };
};


handlers.ConnectTrade = function (args, context) {
    
 

	var res = args.detalii.split("-");
	var PayFabId2 = res[0].split(":")[1];
	var Nume = res[1].split(":")[1];
	var playerData = server.GetUserData({"PlayFabId" : PayFabId2, "Keys" : ["Trade"]});
	
	
	


	if(playerData.Data["Trade"]["Value"].includes(Nume) == true)
	{
		server.UpdateUserData({
        PlayFabId: PayFabId2,
        Data: {
            Trade: playerData.Data["Trade"]["Value"]+"-E2N:"+ res[2].split(":")[1]+"-E2NM:"+res[3].split(":")[1],
           
        },
		Permission:"Public" 
    });
	
	}
	

	/*
	{
	
	}
	*/
	
	
 
    return { messageValue: "succes" };
};





handlers.SetPlayerTile = function (args, context) {
	
	
var res = args.detalii.split("-");
var nume = res[0].split(":")[1];
var x = res[1].split(":")[1];
var y = res[2].split(":")[1];

var TileData = server.GetTitleData({ "Keys" : [x+"-"+y]});

var date = TileData.Data[x+"-"+y];

/*if(TileData.Data[x+"-"+y] == "undefined")
{	
}*/
if (TileData.Data[x+"-"+y])//.split("/").length <15 && !TileData.Data[x+"-"+y].includes(nume) )
{
	server.SetTitleData({
        Key: x+"-"+y,
        Value: TileData.Data[x+"-"+y] +"dd" +"N:"+nume+"=/",
    })
}
else{
server.SetTitleData({
        Key: x+"-"+y,
        Value: TileData.Data[x+"-"+y] +"dd" +"N:"+nume+"=/",
    })

}






	
	
    return { messageValue: args.detalii };
};

handlers.dsadas = function (args, context) {
    
    // The pre-defined "currentPlayerId" variable is initialized to the PlayFab ID of the player logged-in on the game client. 
    // Cloud Script handles authenticating the player automatically.
   /* var message = "Hello " + currentPlayerId + "!";

    // You can use the "log" object to write out debugging statements. It has
    // three functions corresponding to logging level: debug, info, and error. These functions
    // take a message string and an optional object.
    log.info(message);
    var inputValue = null;
    if (args && args.inputValue)
        inputValue = args.inputValue;
    log.debug("helloWorld:", { input: args.inputValue });
	*/
	

	
	
	
	//if(playerData.includes(Nume))
	//	return { messageValue: Nume };
	
/*	server.UpdateUserData({
        PlayFabId: currentPlayerId,
        Data: {
            Trade: args.detalii,
           
        }
		 });
		*/
		
		
	
		
   
	
	
	

    // The value you return from a Cloud Script function is passed back 
    // to the game client in the ExecuteCloudScript API response, along with any log statements
    // and additional diagnostic information, such as any errors returned by API calls or external HTTP
    // requests. They are also included in the optional player_executed_cloudscript PlayStream event 
    // generated by the function execution.
    // (https://api.playfab.com/playstream/docs/PlayStreamEventModels/player/player_executed_cloudscript)
    return { messageValue: "pisat" };
};



handlers.helloWorld2 = function (args, context) {
    
    // The pre-defined "currentPlayerId" variable is initialized to the PlayFab ID of the player logged-in on the game client. 
    // Cloud Script handles authenticating the player automatically.
    var message = "Hello " + args.name + "!";

    // You can use the "log" object to write out debugging statements. It has
    // three functions corresponding to logging level: debug, info, and error. These functions
    // take a message string and an optional object.
    log.info(message);
    var inputValue = null;
    if (args && args.inputValue)
        inputValue = args.inputValue;
    log.debug("helloWorld:", { input: args.inputValue });

    // The value you return from a Cloud Script function is passed back 
    // to the game client in the ExecuteCloudScript API response, along with any log statements
    // and additional diagnostic information, such as any errors returned by API calls or external HTTP
    // requests. They are also included in the optional player_executed_cloudscript PlayStream event 
    // generated by the function execution.
    // (https://api.playfab.com/playstream/docs/PlayStreamEventModels/player/player_executed_cloudscript)
    return { messageValue: message };
};

